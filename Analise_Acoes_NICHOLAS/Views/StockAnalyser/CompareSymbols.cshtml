
@{
    ViewData["Title"] = "Compare Symbols";
}
<!DOCTYPE html>
<html>
<head>
    <style>
        #chart-container {
            display: none;
        }

        #secondInterface {
            display: none;
        }

    </style>

</head>
<body>
    <h1></h1>

    <div id="firstInterface" class="col-xs-8">
        Set the starting date for analysis : <input id="firstInput" class="form-control-sm  form-inline" type="date" name="start" value="2017-08-01">
        <button class="btn btn_default  form-inline" onclick="ChangeStartButton(); $('#resetCanvasBtn').hide();">Set</button>
    </div>

    <div id="secondInterface" class="form-group form-inline">
        <div class="form-group form-inline">
            Analysis Period Start:
            <input id="startInput" class="form-control form-inline" type="date" name="start" onchange="ChangeStartValue();$('#selectChartType').show()" value="">

            <select class="form-control-sm form-inline" id="selectSymbol" onchange="ChangeValue();">
                @foreach (var item in @ViewBag.Company)
            {
                    <option value="@item.Symbol">@item.Symbol</option>
                }
            </select>

            <select class="form-control-sm form-inline" id="selectChartType" onchange="ChangeChartType()" style="display:inline-block">
                <option value="Closing">Closing Value</option>
                <option value="Feedback">Feedback</option>
                <option value="LogFeedback">LogFeedback</option>
                <option value="Volume">Volume</option>
                <option value="Histogram">Histogram</option>
            </select>

            <button id="startDatasetBtn" class="btn btn_default form-inline" onclick="StartChart(); $('#selectChartType').hide();$('#addDataset').show()">Start Chart</button>

            <button id="addDataset" class="btn btn_default form-inline" onclick="AddDataSetType(selectedSymbol, start, chartType); myLineChart.update();">Add Dataset</button>

            <button id="resetCanvasBtn" class="btn btn_default form-inline" onclick="ResetCanvas();$('#selectChartType').show()"> Reset Canvas</button>

            <div id="chart-container" class="chart-container" style="height:70vh; width:85vw">
                <canvas id="myLineChart"></canvas>
            </div>
        </div>
    </div>
    <br><br />
    
    <script>
        var start = new Date();
        start = start.toISOString().split('T')[0];
        start = "2017-08-01";
        var end = new Date();
        var canvasWasStarted = false;
        var chartType = "Closing";
        var configType = 'line';

        document.getElementById("selectChartType").value = chartType;
        var url = '/StockAnalyser/' + chartType + 'Chart';

        function ChangeStartButton() {                
            $('#firstInterface').hide();
            $("#secondInterface").fadeIn(1000);
            $('#addDataset').hide();
            ChangeStartValue(document.getElementById("firstInput").value);
            document.getElementById("startInput").value = start;
            if (Date.parse(start) > end) {
                alert("Starting date can't be past today's date.")
                start = new Date();
                start.setMonth(8);
                start = start.toISOString().split('T')[0];
                document.getElementById("startInput").value = start;
            }
        }



        function ChangeStartValue(date)
        {
            if (canvasWasStarted == true)
            {
                ResetCanvas();
            }
            if (date != null)
            {
                start = date;
            }
            else
            {
                start = document.getElementById("startInput").value;
                if (Date.parse(start) > end)
                {
                    alert("Starting date can't be past today's date.")
                    start = new Date();
                    start.setMonth(8);
                    start = start.toISOString().split('T')[0];
                    document.getElementById("startInput").value = start;
                }
            }
        }

        var selectedSymbol = "@ViewBag.Company[0].Symbol";
        function ChangeValue() {
            var inputSelect = document.getElementById("selectSymbol");
            selectedSymbol = inputSelect.options[inputSelect.selectedIndex].value;
        }

        function ChangeChartType() {
            var chartTypeSelect = document.getElementById("selectChartType");
            chartType = chartTypeSelect.options[chartTypeSelect.selectedIndex].value;
            if (chartType == 'Volume' || chartType == 'Histogram') {
                configType = 'bar';
            }
            else {
                configType = 'line';
            }
        }

        var labels = [], data = [];
        var dataPoints = [];
        var jsonData;
        var config;
        var myLineChart, ctx;

        function ResetCanvas() {
            //Reset the list variables
            dataPoints = [];
            data = [];                
            setConfig();                
            labels = [];            
            $('#myLineChart').remove();
            $('#chart-container').hide();
            $('#chart-container').append('<canvas id="myLineChart"></canvas>');
            $('#myLineChart').hide();
            // Instantiate a new chart
            ctx = document.getElementById("myLineChart").getContext("2d");
            canvasWasStarted = false; // Reset the flag
            $('#resetCanvasBtn').hide();
            $("#startDatasetBtn").show();
            $('#addDataset').hide();
        };

        function StartChart()
        {                
            var url = '/StockAnalyser/' + chartType + 'Chart'; //Construct the controller url
            if (selectedSymbol != "")
            {
                if (canvasWasStarted == false)
                {
                    jsonData = $.ajax({
                        url: url,//'/StockAnalyser/ClosingChart/',
                        data: { 'symbol': selectedSymbol, "start": start, "end": end.toISOString() },
                        dataType: 'json',
                        success: function (response)
                        {
                            for (i in response)
                            {
                                dataPoints[i] = (response[i]);
                            }
                                
                            // Split labels and data into separate arrays
                            for (i in dataPoints)
                            {
                                labels.push(dataPoints[i].x);
                                data.push(dataPoints[i].y);                                    
                            }
                            myLineChart.update();
                            $("#myLineChart").fadeIn(2000);
                            $('#chart-container').fadeIn(2000);
                        },
                    });
                    setConfig();
                    // Get the context of the canvas element we want to select
                    ctx = document.getElementById("myLineChart").getContext("2d");

                    // Instantiate a new chart
                    myLineChart = new Chart(ctx, config);
                    myLineChart.update();
                    canvasWasStarted = true;
                    $('#startDatasetBtn').hide();
                    $("#resetCanvasBtn").show();
                }
            }
        }

        // Create the chart.js data structure using 'labels' and 'data'
        function setConfig()
        {
            config =
            {
                type: configType,
                data:
                {
                    labels: labels,
                    datasets: [
                    {
                        label: selectedSymbol,
                        bordercolor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgb(54, 162, 235)',
                        fill: false,
                        data: data,
                    }],
                },
                options:
                {
                    elements:
                    {
                        line:
                        {
                            tension: 0,
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    scales:
                    {
                        xAxes: [
                            {
                            display: true,
                            scaleLabel:
                            {
                                display: true,
                                labelString: 'Date'
                            }
                        }],
                        yAxes: [
                        {
                            display: true,
                            scaleLabel:
                            {
                                display: true,
                                labelString: chartType
                            }
                        }]
                    }
                }
            }
        }

    </script>

</body>
</html>